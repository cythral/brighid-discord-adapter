Transform: AWS::Serverless-2016-10-31
Description: Brighid Discord to SNS Adapter
Parameters:
  Image:
    Type: String
    Description: URI of the Docker Image to pull.

  GatewayUri:
    Type: String
    Description: URI of the Discord WebSocket Gateway.

  AdapterToken:
    Type: String
    Description: Token to use for authenticating against the Discord gateway and API.

  MetricsNamespace:
    Type: String
    Description: Namespace to publish metrics under.

  IdentityServerUri:
    Type: String
    Description: URI of the identity server.

  DatabaseName:
    Type: String
    Description: The name of the database to use

  DatabaseUser:
    Type: String
    Description: The name of the database user to use

  DatabasePassword:
    Type: String
    Description: The encrypted database password

  LambdajectionLayerVersion:
    Type: String
    Description: ARN of the Lambda Layer containing Lambdajection + its dependencies

  DotnetLayerVersion:
    Type: String
    Description: ARN of the Lambda Layer containing .NET

  RestResponseServerPort:
    Type: Number
    Description: Port to use for the Adapter Shell.

Resources:
  IdentityApplication:
    Type: Custom::IdentityApplication
    Properties:
      ServiceToken: !ImportValue identity:ApplicationTopicArn
      Name: brighid-discord-adapter
      Roles:
        - Basic

  RestQueue:
    Type: AWS::SQS::Queue

  RestResponseServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue cfn-utilities:VpcId
      GroupDescription: Allows traffic to the Response Server port.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref RestResponseServerPort
          ToPort: !Ref RestResponseServerPort
          CidrIp: !ImportValue cfn-utilities:Ipv4NetworkCidr

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue brighid-infrastructure:ClusterName
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - !ImportValue cfn-utilities:SubnetIds
          SecurityGroups:
            - !ImportValue cfn-utilities:WebSecurityGroupId
            - !GetAtt RestResponseServerSecurityGroup.GroupId
          AssignPublicIp: ENABLED
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 1
        MaximumPercent: 200

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      Family: !Ref AWS::StackName
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: discord-adapter
          Essential: true
          Image: !Ref Image
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid
          Environment:
            - Name: Encrypted__Adapter__Token
              Value: !Ref AdapterToken
            - Name: Requests__QueueUrl
              Value: !Ref RestQueue
            - Name: RestClient__RequestQueueUrl
              Value: !Ref RestQueue
            - Name: ResponseServer__Port
              Value: !Ref RestResponseServerPort
            - Name: Gateway__Uri
              Value: !Ref GatewayUri
            - Name: Metrics__Namespace
              Value: !Ref MetricsNamespace
            - Name: Sns__TopicArn
              Value: !ImportValue brighid-infrastructure:RequestTopicArn
            - Name: Identity__IdentityServerUri
              Value: !Ref IdentityServerUri
            - Name: Identity__ClientId
              Value: !GetAtt IdentityApplication.Id
            - Name: Encrypted__Identity__ClientSecret
              Value: !GetAtt IdentityApplication.EncryptedSecret
            - Name: Database__Host
              Value: !ImportValue mutedac:ClusterAddress
            - Name: Database__Name
              Value: !Ref DatabaseName
            - Name: Database__User
              Value: !Ref DatabaseUser
            - Name: Encrypted__Database__Password
              Value: !Ref DatabasePassword

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com

  TaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !ImportValue brighid-infrastructure:RequestTopicArn

          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
            Condition:
              StringEquals:
                cloudwatch:namespace: !Ref MetricsNamespace

          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
            Resource: !GetAtt RestQueue.Arn

          - Effect: Allow
            Action: sqs:SendMessage
            Resource: "*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  ResponseHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ResponseHandler::Brighid.Discord.Adapter.ResponseHandler.Handler::Run
      Runtime: provided.al2
      Timeout: 30
      CodeUri: ../bin/ResponseHandler/Release/net5.0/linux-x64/publish/
      MemorySize: 512
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:dotnet:${DotnetLayerVersion}
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:lambdajection:${LambdajectionLayerVersion}
      Policies:
        - AWSLambdaExecute
        - !Ref ResponseHandlerPolicy
      Environment:
        Variables:
          ResponseHandler__QueueUrl: !Ref RestQueue

  ResponseHandlerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource: !GetAtt RestQueue.Arn

  ResponseHandlerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt ResponseHandler.Arn
      TopicArn: !ImportValue brighid-infrastructure:ResponseTopicArn
      FilterPolicy:
        Brighid.SourceSystem: [discord]

  ResponseHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ResponseHandler.Arn
      Principal: sns.amazonaws.com
      SourceArn: !ImportValue brighid-infrastructure:ResponseTopicArn
