Transform: AWS::Serverless-2016-10-31
Description: Brighid Discord to SNS Adapter
Parameters:
  DomainName:
    Type: String
    Description: Domain name to use for the Brighid Discord Adapter.

  EnvironmentName:
    Type: String
    Description: Name of the environment being deployed to.

  Image:
    Type: String
    Description: URI of the Docker Image to pull.

  GatewayUri:
    Type: String
    Description: URI of the Discord WebSocket Gateway.

  AdapterToken:
    Type: String
    Description: Token to use for authenticating against the Discord gateway and API.

  MetricsNamespace:
    Type: String
    Description: Namespace to publish metrics under.

  IdentityServerUri:
    Type: String
    Description: URI of the identity server.

  StaticAssetsRepositoryUrl:
    Type: String
    Description: URL of the static assets repository where images are stored.

  RegistrationUrl:
    Type: String
    Description: URL that users can register and link their Discord account at.

  DatabaseHost:
    Type: String
    Description: The hostname of the database to use.

  DatabaseName:
    Type: String
    Description: The name of the database to use

  DatabaseUser:
    Type: String
    Description: The name of the database user to use

  DatabasePassword:
    Type: String
    Description: The encrypted database password

  LambdajectionVersion:
    Type: String
    Description: ARN of the Lambda Layer containing Lambdajection + its dependencies

  DotnetVersion:
    Type: String
    Description: ARN of the Lambda Layer containing .NET

  ClientId:
    Type: String
    Description: Client ID of the Discord Application.

  ClientSecret:
    Type: String
    Description: Encrypted Client Secret of the Discord Application.

  CommandsServiceUri:
    Type: String
    Description: URI of the Commands Service

  CommandsDefaultPrefix:
    Type: String
    Description: Default prefix to use for commands.

  EnvoyImage:
    Type: String
    Description: Image to use for the Envoy Sidecar.

  XrayImage:
    Type: String
    Description: Image to use for the X-Ray Sidecar.

  MeshNodeName:
    Type: String
    Description: Name to use for the node in the App Mesh.

  LogLevel:
    Type: String
    Description: The minimum log level to allow.

  ValidateScopes:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description: Whether or not to perform scope validation (don't use in production as this adds extra overhead to service initialization).

Resources:
  MeshService:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: brighid-mesh
      MeshOwner: !ImportValue cfn-metadata:SharedAccountId
      VirtualServiceName: !Ref DomainName
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: !GetAtt MeshNode.VirtualNodeName

  MeshNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: brighid-mesh
      MeshOwner: !ImportValue cfn-metadata:SharedAccountId
      VirtualNodeName: !Ref MeshNodeName
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: !ImportValue brighid-infrastructure:ServiceRegistryName
            ServiceName: discord
            IpPreference: IPv6_PREFERRED

  MeshGatewayRoute:
    Type: Custom::MeshGatewayRoute
    Properties:
      ServiceToken: !ImportValue cfn-gateway-route-resource:GatewayRouteLambdaArn
      MeshName: brighid-mesh
      MeshOwner: !ImportValue cfn-metadata:SharedAccountId
      VirtualGatewayName: internet
      GatewayRouteName: !Ref MeshNodeName
      Spec:
        Http2Route:
          Action:
            Target:
              VirtualService:
                VirtualServiceName: !GetAtt MeshService.VirtualServiceName
          Match:
            Prefix: /
            Hostname:
              Exact: !Ref DomainName

  ServiceRegistry:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Service Registry Record for Brighid Discord Adapter
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: AAAA
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      NamespaceId: !ImportValue brighid-infrastructure:ServiceRegistry
      Name: discord

  DiscordResponderRole:
    Type: Custom::IdentityRole
    Properties:
      ServiceToken: !ImportValue identity-resources:RoleResourceArn
      Name: DiscordResponder

  DiscordNodeManagerRole:
    Type: Custom::IdentityRole
    Properties:
      ServiceToken: !ImportValue identity-resources:RoleResourceArn
      Name: DiscordNodeManager

  DiscordIdentityApplication:
    Type: Custom::IdentityApplication
    Properties:
      ServiceToken: !ImportValue identity-resources:ApplicationResourceArn
      Name: BrighidDiscordAdapter
      Roles:
        - Basic
        - Impersonator
        - !GetAtt DiscordNodeManagerRole.Name
        - !GetAtt DiscordResponderRole.Name

  RestQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue brighid-infrastructure:ClusterName
      ServiceName: discord-adapter
      LaunchType: FARGATE
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - !ImportValue cfn-utilities:SubnetIds
          SecurityGroups:
            - !ImportValue cfn-utilities:WebSecurityGroupId
            - !ImportValue cfn-utilities:EnvoySecurityGroupId
          AssignPublicIp: ENABLED
      TaskDefinition: !Ref TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceRegistry.Arn
          Port: 80
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      Family: !Ref AWS::StackName
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: "1337"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "80"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
      ContainerDefinitions:
        - Name: discord-adapter
          Essential: true
          Image: !Ref Image
          DependsOn:
            - ContainerName: envoy
              Condition: HEALTHY
          PortMappings:
            - ContainerPort: 80
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl --fail --http2-prior-knowledge http://localhost/healthcheck || exit 1
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid
          Environment:
            - Name: AWS_XRAY_DAEMON_ADDRESS
              Value: xray:2000
            - Name: AWS_XRAY_CONTEXT_MISSING
              Value: LOG_ERROR
            - Name: Environment
              Value: !Ref EnvironmentName
            - Name: Encrypted__Adapter__Token
              Value: !Ref AdapterToken
            - Name: Requests__QueueUrl
              Value: !Ref RestQueue
            - Name: RestClient__RequestQueueUrl
              Value: !Ref RestQueue
            - Name: Gateway__Uri
              Value: !Ref GatewayUri
            - Name: Sns__TopicArn
              Value: !ImportValue brighid-infrastructure:RequestTopicArn
            - Name: Identity__IdentityServerUri
              Value: !Sub http://${IdentityServerUri}
            - Name: Identity__ClientId
              Value: !GetAtt DiscordIdentityApplication.Id
            - Name: Encrypted__Identity__ClientSecret
              Value: !GetAtt DiscordIdentityApplication.EncryptedSecret
            - Name: Database__Host
              Value: !Ref DatabaseHost
            - Name: Database__Name
              Value: !Ref DatabaseName
            - Name: Database__User
              Value: !Ref DatabaseUser
            - Name: Encrypted__Database__Password
              Value: !Ref DatabasePassword
            - Name: Adapter__ClientId
              Value: !Ref ClientId
            - Name: Encrypted__Adapter__ClientSecret
              Value: !Ref ClientSecret
            - Name: Adapter__Host
              Value: !Ref DomainName
            - Name: Adapter__StaticAssetsRepositoryUrl
              Value: !Ref StaticAssetsRepositoryUrl
            - Name: Adapter__RegistrationUrl
              Value: !Ref RegistrationUrl
            - Name: Adapter__OAuth2RedirectUri
              Value: !Sub https://${DomainName}/oauth2/callback
            - Name: Adapter__LogLevel
              Value: !Ref LogLevel
            - Name: Adapter__ValidateScopes
              Value: !Ref ValidateScopes
            - Name: Commands__ServiceUri
              Value: !Ref CommandsServiceUri
            - Name: Commands__DefaultPrefix
              Value: !Ref CommandsDefaultPrefix
            - Name: Auth__MetadataAddress
              Value: !Sub http://${IdentityServerUri}/.well-known/openid-configuration
            - Name: Auth__ValidIssuer
              Value: !Sub https://${IdentityServerUri}/
        - Name: envoy
          Image: !Ref EnvoyImage
          Essential: true
          User: "1337"
          Ulimits:
            - Name: "nofile"
              HardLimit: 15000
              SoftLimit: 15000
          PortMappings:
            - ContainerPort: 9901
            - ContainerPort: 15000
            - ContainerPort: 15001
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid
          Environment:
            - Name: APPMESH_DUALSTACK_ENDPOINT
              Value: "1"
            - Name: ENVOY_ADMIN_ACCESS_ENABLE_IPV6
              Value: "1"
            - Name: APPMESH_RESOURCE_ARN
              Value: !Sub
                - mesh/brighid-mesh@${SharedAccountId}/virtualNode/${MeshNode.VirtualNodeName}
                - SharedAccountId: !ImportValue cfn-metadata:SharedAccountId
        - Name: xray
          Image: !Ref XrayImage
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com

  TaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !ImportValue brighid-infrastructure:RequestTopicArn

          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
            Resource: !GetAtt RestQueue.Arn

          - Effect: Allow
            Action:
              - sqs:SendMessage
              - ecs:DescribeTasks
            Resource: "*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /brighid/discord-adapter
      RetentionInDays: 14

  ResponseHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ResponseHandler::Brighid.Discord.Adapter.ResponseHandler.Handler::Run
      Runtime: provided.al2
      Timeout: 30
      CodeUri: ../bin/ResponseHandler/Release/linux-arm64/publish/
      MemorySize: 512
      Architectures:
        - arm64
      Layers:
        - !Sub "{{resolve:ssm:/dotnet/${DotnetVersion}/layer-arn}}"
        - !Sub "{{resolve:ssm:/lambdajection/${LambdajectionVersion}/layer-arn}}"
      Policies:
        - AWSLambdaExecute
        - !Ref ResponseHandlerPolicy
      Events:
        Sns:
          Type: SNS
          Properties:
            Topic: !ImportValue brighid-infrastructure:ResponseTopicArn
            FilterPolicy:
              Brighid.SourceSystem: [discord]
      Environment:
        Variables:
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: "1"
          ResponseHandler__QueueUrl: !Ref RestQueue

  ResponseHandlerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource: !GetAtt RestQueue.Arn

  CacheExpirer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: CacheExpirer::Brighid.Discord.CacheExpirer.Handler::Run
      Runtime: provided.al2
      Timeout: 30
      CodeUri: ../bin/CacheExpirer/Release/linux-arm64/publish/
      MemorySize: 512
      Architectures:
        - arm64
      Layers:
        - !Sub "{{resolve:ssm:/dotnet/${DotnetVersion}/layer-arn}}"
        - !Sub "{{resolve:ssm:/lambdajection/${LambdajectionVersion}/layer-arn}}"
      Policies:
        - AWSLambdaExecute
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
      Events:
        Sns:
          Type: SNS
          Properties:
            Topic: !ImportValue brighid-infrastructure:CacheExpirationTopic
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue cfn-utilities:LambdaSecurityGroupId
        SubnetIds: !Split [",", !ImportValue cfn-utilities:SubnetIds]
      Environment:
        Variables:
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: "1"
          Expirer__AdapterUrl: !Ref DomainName
          Identity__IdentityServerUri: !Sub http://${IdentityServerUri}
          Identity__ClientId: !GetAtt CacheExpirerIdentityApplication.Id
          Identity__ClientSecret: !GetAtt CacheExpirerIdentityApplication.EncryptedSecret

  CacheExpirerIdentityApplication:
    Type: Custom::IdentityApplication
    Properties:
      ServiceToken: !ImportValue identity-resources:ApplicationResourceArn
      Name: BrighidDiscordCacheExpirer
      Roles:
        - Basic
        - !GetAtt CacheExpirerIdentityRole.Name

  CacheExpirerIdentityRole:
    Type: Custom::IdentityRole
    Properties:
      ServiceToken: !ImportValue identity-resources:RoleResourceArn
      Name: DiscordCacheManager

  AccountLinkStartUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /brighid/discord/account-link/start-url
      Value: !Sub https://discord.com/api/oauth2/authorize?client_id=${ClientId}&redirect_uri=https%3A%2F%2F${DomainName}%2Foauth2%2Fcallback&response_type=code&scope=identify

  MonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Brighid Discord Adapter Monitoring
      Subscription:
        - Endpoint: talen.fisher+brighid-discord-adapter@cythral.com
          Protocol: email

  GatewayRestartFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: '{ $.EventId.Name = "GatewayRestarted" }'
      MetricTransformations:
        - MetricName: GatewayRestarted
          MetricNamespace: !Ref MetricsNamespace
          MetricValue: "1"
          Unit: Count

  GatewayRestartAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Period: 60
      Threshold: 1
      MetricName: GatewayRestarted
      Namespace: !Ref MetricsNamespace
      TreatMissingData: notBreaching
      Unit: Count
      Statistic: Sum
      AlarmActions:
        - !Ref MonitoringTopic
      OKActions:
        - !Ref MonitoringTopic
