{
  "StartAt": "Build",
  "States": {
    "Build": {
      "Type": "Task",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Resource": "arn:aws:states:::codebuild:startBuild.sync",
      "Parameters": {
        "ProjectName": "${BuildProject}",
        "SourceVersion.$": "States.Format('{}^\\{{}\\}', $.ref, $.head_commit_id)"
      },
      "ResultPath": "$.BuildOutput",
      "Next": "On Default Branch?"
    },
    "On Default Branch?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.on_default_branch",
          "BooleanEquals": true,
          "Next": "Check if Superseded"
        },
        {
          "Variable": "$.on_default_branch",
          "BooleanEquals": false,
          "Next": "Success"
        }
      ]
    },
    "Check if Superseded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": "$.SupersededOutput",
      "Next": "Was Superseded?",
      "Parameters": {
        "QueueUrl": "${SupersessionQueue}",
        "MessageGroupId": "${GithubRepo}",
        "MessageBody": {
          "Pipeline": "${GithubRepo}",
          "CommitTimestamp.$": "$.head_commit.timestamp",
          "Token.$": "$$.Task.Token"
        }
      }
    },
    "Was Superseded?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.SupersededOutput.Superseded",
          "BooleanEquals": true,
          "Next": "Success"
        },
        {
          "Variable": "$.SupersededOutput.Superseded",
          "BooleanEquals": false,
          "Next": "Deploy Identity"
        }
      ]
    },
    "Deploy Identity": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Next": "Dev - Deploy",
      "ResultPath": null,
      "Parameters": {
        "FunctionName": "${EcsDeploymentFunctionArn}",
        "Payload": {
          "RoleArn": "${DevRoleArn}",
          "ClusterName": "brighid",
          "ServiceName": "identity"
        }
      }
    },
    "Dev - Deploy": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": null,
      "Parameters": {
        "QueueUrl": "${DeploymentQueue}",
        "MessageGroupId": "${GithubRepo}-dev",
        "MessageBody": {
          "StackName": "${GithubRepo}",
          "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
          "TemplateFileName": "${GithubRepo}.template.yml",
          "TemplateConfigurationFileName": "${GithubRepo}.dev.config.json",
          "Capabilities": [
            "CAPABILITY_IAM",
            "CAPABILITY_AUTO_EXPAND"
          ],
          "RoleArn": "${DevRoleArn}",
          "Token.$": "$$.Task.Token",
          "EnvironmentName": "dev",
          "CommitInfo": {
            "GithubOwner": "${GithubOwner}",
            "GithubRepository": "${GithubRepo}",
            "GithubRef.$": "$.head_commit.id"
          }
        }
      },
      "Next": "Dev - Tag Image"
    },
    "Dev - Tag Image": {
      "Type": "Task",
      "Resource": "arn:aws:states:::codebuild:startBuild.sync",
      "Parameters": {
        "ProjectName": "${TagImageBuildProject}",
        "SourceVersion.$": "States.Format('{}^\\{{}\\}', $.ref, $.head_commit_id)",
        "EnvironmentVariablesOverride": [
          {
            "Name": "OLD_TAG",
            "Type": "PLAINTEXT",
            "Value.$": "States.Format('{}', $.BuildOutput.Build.BuildNumber)"
          },
          {
            "Name": "NEW_TAG",
            "Type": "PLAINTEXT",
            "Value": "dev"
          }
        ]
      },
      "ResultPath": null,
      "Next": "Ask for Approval"
    },
    "Ask for Approval": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Next": "Was Approved?",
      "ResultPath": "$.ApprovalDecision",
      "Parameters": {
        "FunctionName": "${ApprovalNotificationFunction}",
        "Payload": {
          "Pipeline": "${GithubRepo}",
          "ArtifactStore": "${ArtifactStore}",
          "CustomMessage": "${GithubRepo} requires manual approval for deployment to production",
          "Token.$": "$$.Task.Token"
        }
      }
    },
    "Was Approved?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ApprovalDecision.Action",
          "StringEquals": "approve",
          "Next": "Prod - Deploy"
        },
        {
          "Variable": "$.ApprovalDecision.Action",
          "StringEquals": "reject",
          "Next": "Success"
        }
      ]
    },
    "Prod - Deploy": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": null,
      "Parameters": {
        "QueueUrl": "${DeploymentQueue}",
        "MessageGroupId": "${GithubRepo}",
        "MessageBody": {
          "StackName": "${GithubRepo}",
          "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
          "TemplateFileName": "${GithubRepo}.template.yml",
          "TemplateConfigurationFileName": "${GithubRepo}.prod.config.json",
          "RoleArn": "${ProdRoleArn}",
          "Token.$": "$$.Task.Token",
          "Capabilities": [
            "CAPABILITY_IAM",
            "CAPABILITY_AUTO_EXPAND"
          ],
          "EnvironmentName": "prod",
          "CommitInfo": {
            "GithubOwner": "${GithubOwner}",
            "GithubRepository": "${GithubRepo}",
            "GithubRef.$": "$.head_commit.id"
          }
        }
      },
      "Next": "Prod - Tag Image"
    },
    "Prod - Tag Image": {
      "Type": "Task",
      "Resource": "arn:aws:states:::codebuild:startBuild.sync",
      "Parameters": {
        "ProjectName": "${TagImageBuildProject}",
        "SourceVersion.$": "States.Format('{}^\\{{}\\}', $.ref, $.head_commit_id)",
        "EnvironmentVariablesOverride": [
          {
            "Name": "OLD_TAG",
            "Type": "PLAINTEXT",
            "Value.$": "States.Format('{}', $.BuildOutput.Build.BuildNumber)"
          },
          {
            "Name": "NEW_TAG",
            "Type": "PLAINTEXT",
            "Value": "prod"
          }
        ]
      },
      "ResultPath": null,
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}